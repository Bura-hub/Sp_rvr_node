// Generated by gencpp from file sphero_rvr_msgs/SetLedsRequest.msg
// DO NOT EDIT!


#ifndef SPHERO_RVR_MSGS_MESSAGE_SETLEDSREQUEST_H
#define SPHERO_RVR_MSGS_MESSAGE_SETLEDSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sphero_rvr_msgs
{
template <class ContainerAllocator>
struct SetLedsRequest_
{
  typedef SetLedsRequest_<ContainerAllocator> Type;

  SetLedsRequest_()
    : rgb_color()  {
    }
  SetLedsRequest_(const ContainerAllocator& _alloc)
    : rgb_color(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _rgb_color_type;
  _rgb_color_type rgb_color;





  typedef boost::shared_ptr< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetLedsRequest_

typedef ::sphero_rvr_msgs::SetLedsRequest_<std::allocator<void> > SetLedsRequest;

typedef boost::shared_ptr< ::sphero_rvr_msgs::SetLedsRequest > SetLedsRequestPtr;
typedef boost::shared_ptr< ::sphero_rvr_msgs::SetLedsRequest const> SetLedsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator1> & lhs, const ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.rgb_color == rhs.rgb_color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator1> & lhs, const ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sphero_rvr_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a09c60cc08197f172120c3cd927913a3";
  }

  static const char* value(const ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa09c60cc08197f17ULL;
  static const uint64_t static_value2 = 0x2120c3cd927913a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sphero_rvr_msgs/SetLedsRequest";
  }

  static const char* value(const ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] rgb_color\n"
;
  }

  static const char* value(const ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rgb_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLedsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sphero_rvr_msgs::SetLedsRequest_<ContainerAllocator>& v)
  {
    s << indent << "rgb_color[]" << std::endl;
    for (size_t i = 0; i < v.rgb_color.size(); ++i)
    {
      s << indent << "  rgb_color[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.rgb_color[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPHERO_RVR_MSGS_MESSAGE_SETLEDSREQUEST_H
