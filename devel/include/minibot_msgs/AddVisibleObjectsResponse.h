// Generated by gencpp from file minibot_msgs/AddVisibleObjectsResponse.msg
// DO NOT EDIT!


#ifndef MINIBOT_MSGS_MESSAGE_ADDVISIBLEOBJECTSRESPONSE_H
#define MINIBOT_MSGS_MESSAGE_ADDVISIBLEOBJECTSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace minibot_msgs
{
template <class ContainerAllocator>
struct AddVisibleObjectsResponse_
{
  typedef AddVisibleObjectsResponse_<ContainerAllocator> Type;

  AddVisibleObjectsResponse_()
    : object_ids()  {
    }
  AddVisibleObjectsResponse_(const ContainerAllocator& _alloc)
    : object_ids(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _object_ids_type;
  _object_ids_type object_ids;





  typedef boost::shared_ptr< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct AddVisibleObjectsResponse_

typedef ::minibot_msgs::AddVisibleObjectsResponse_<std::allocator<void> > AddVisibleObjectsResponse;

typedef boost::shared_ptr< ::minibot_msgs::AddVisibleObjectsResponse > AddVisibleObjectsResponsePtr;
typedef boost::shared_ptr< ::minibot_msgs::AddVisibleObjectsResponse const> AddVisibleObjectsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator1> & lhs, const ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.object_ids == rhs.object_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator1> & lhs, const ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace minibot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e528cc6018453c0c96b68b36e0e306c9";
  }

  static const char* value(const ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe528cc6018453c0cULL;
  static const uint64_t static_value2 = 0x96b68b36e0e306c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "minibot_msgs/AddVisibleObjectsResponse";
  }

  static const char* value(const ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] object_ids\n"
"\n"
;
  }

  static const char* value(const ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddVisibleObjectsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::minibot_msgs::AddVisibleObjectsResponse_<ContainerAllocator>& v)
  {
    s << indent << "object_ids[]" << std::endl;
    for (size_t i = 0; i < v.object_ids.size(); ++i)
    {
      s << indent << "  object_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINIBOT_MSGS_MESSAGE_ADDVISIBLEOBJECTSRESPONSE_H
