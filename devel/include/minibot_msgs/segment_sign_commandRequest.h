// Generated by gencpp from file minibot_msgs/segment_sign_commandRequest.msg
// DO NOT EDIT!


#ifndef MINIBOT_MSGS_MESSAGE_SEGMENT_SIGN_COMMANDREQUEST_H
#define MINIBOT_MSGS_MESSAGE_SEGMENT_SIGN_COMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace minibot_msgs
{
template <class ContainerAllocator>
struct segment_sign_commandRequest_
{
  typedef segment_sign_commandRequest_<ContainerAllocator> Type;

  segment_sign_commandRequest_()
    : command(0)  {
    }
  segment_sign_commandRequest_(const ContainerAllocator& _alloc)
    : command(0)  {
  (void)_alloc;
    }



   typedef int8_t _command_type;
  _command_type command;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PERSISTENT_SAVE)
  #undef PERSISTENT_SAVE
#endif
#if defined(_WIN32) && defined(TOGGLE_PATCH_VISUALIZATION)
  #undef TOGGLE_PATCH_VISUALIZATION
#endif
#if defined(_WIN32) && defined(LOAD_DEFAULT)
  #undef LOAD_DEFAULT
#endif

  enum {
    PERSISTENT_SAVE = 0,
    TOGGLE_PATCH_VISUALIZATION = 1,
    LOAD_DEFAULT = 2,
  };


  typedef boost::shared_ptr< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct segment_sign_commandRequest_

typedef ::minibot_msgs::segment_sign_commandRequest_<std::allocator<void> > segment_sign_commandRequest;

typedef boost::shared_ptr< ::minibot_msgs::segment_sign_commandRequest > segment_sign_commandRequestPtr;
typedef boost::shared_ptr< ::minibot_msgs::segment_sign_commandRequest const> segment_sign_commandRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator1> & lhs, const ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator1> & lhs, const ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace minibot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67dfdadbbb6dd9ac14fa405e04acf5b7";
  }

  static const char* value(const ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67dfdadbbb6dd9acULL;
  static const uint64_t static_value2 = 0x14fa405e04acf5b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "minibot_msgs/segment_sign_commandRequest";
  }

  static const char* value(const ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 PERSISTENT_SAVE=0\n"
"int8 TOGGLE_PATCH_VISUALIZATION=1\n"
"int8 LOAD_DEFAULT=2\n"
"\n"
"int8 command\n"
;
  }

  static const char* value(const ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct segment_sign_commandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::minibot_msgs::segment_sign_commandRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINIBOT_MSGS_MESSAGE_SEGMENT_SIGN_COMMANDREQUEST_H
